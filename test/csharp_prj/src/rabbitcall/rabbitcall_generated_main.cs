// This file was auto-generated by RabbitCall - do not modify manually.

// ReSharper disable All

using System;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;

namespace CsNamespace {
	public static unsafe class RabbitCallApi {
		public const string cppLibraryFile = _rc_Ciu._rc_cl;
		
		public static void init() {
			_rc_Ciu.init();
		}
	}
	
	public unsafe struct _rc_PtrAndSize {
		public void *ptr;
		public long size;
	}
	
	public static unsafe class _rc_Ciu {
		public const string _rc_cl = "cpp_prj";
		static bool isInitialized = false;
		static Encoding utf8Encoding = new UTF8Encoding();
		static Encoding utf16Encoding = new UnicodeEncoding();
		
		// Invoked when the c++ code no longer needs a particular c# callback. Keep a reference to this function here so that it is not GC'd.
		static ReleaseCallbackCallback releaseCallbackCallback;
		
		delegate void ReleaseCallbackCallback(IntPtr ptr);
		[SuppressUnmanagedCodeSecurity, DllImport(_rc_cl, EntryPoint = "rabbitcall_init")]
		static extern void rabbitcall_init(ReleaseCallbackCallback releaseCallbackCallback, _rc_PtrAndSize *exceptionPtr);
		
		[SuppressUnmanagedCodeSecurity, DllImport(_rc_cl, EntryPoint = "rabbitcall_allocateMemory")]
		public static extern void * rabbitcall_allocateMemory(long size);
		
		[SuppressUnmanagedCodeSecurity, DllImport(_rc_cl, EntryPoint = "rabbitcall_deallocateMemory")]
		public static extern void rabbitcall_deallocateMemory(void *ptr);
		
		[SuppressUnmanagedCodeSecurity, DllImport(_rc_cl, EntryPoint = "rabbitcall_getTypeSizeByName")]
		public static extern long rabbitcall_getTypeSizeByName([MarshalAs(UnmanagedType.LPStr)] string name);
		
		static void checkTypeSize(string cppName, string csName, long csSize, long? configuredSize) {
			long cppSize = rabbitcall_getTypeSizeByName(cppName);
			if (cppSize != csSize) throw new Exception($"Type has different size in C++ ({cppName}: {cppSize}) than in C# ({csName}: {csSize})");
			if (configuredSize != null && cppSize != configuredSize.Value) throw new Exception($"Type has different size in C++ ({cppName}: {cppSize}) than in configuration ({configuredSize.Value})");
		}
		
		public static void init() {
			if (isInitialized) throw new Exception("Already initialized");
			isInitialized = true;
			
			_rc_PtrAndSize _rc_e;
			releaseCallbackCallback = _rc_Ciu.releaseCallback;
			rabbitcall_init(releaseCallbackCallback, &_rc_e);
			if (_rc_e.ptr != null) throw new Exception(_rc_Ciu.readStringUtf8AndFree(_rc_e));
			
			checkTypeSize("char", "byte", sizeof(byte), 1);
			checkTypeSize("char16_t", "char", sizeof(char), 2);
			checkTypeSize("bool", "bool", sizeof(bool), 1);
			checkTypeSize("signed char", "sbyte", sizeof(sbyte), 1);
			checkTypeSize("unsigned char", "byte", sizeof(byte), 1);
			checkTypeSize("short", "short", sizeof(short), 2);
			checkTypeSize("signed short", "short", sizeof(short), 2);
			checkTypeSize("unsigned short", "ushort", sizeof(ushort), 2);
			checkTypeSize("int", "int", sizeof(int), 4);
			checkTypeSize("signed int", "int", sizeof(int), 4);
			checkTypeSize("unsigned int", "uint", sizeof(uint), 4);
			checkTypeSize("long long", "long", sizeof(long), 8);
			checkTypeSize("signed long long", "long", sizeof(long), 8);
			checkTypeSize("unsigned long long", "ulong", sizeof(ulong), 8);
			checkTypeSize("int8_t", "sbyte", sizeof(sbyte), 1);
			checkTypeSize("uint8_t", "byte", sizeof(byte), 1);
			checkTypeSize("int16_t", "short", sizeof(short), 2);
			checkTypeSize("uint16_t", "ushort", sizeof(ushort), 2);
			checkTypeSize("int32_t", "int", sizeof(int), 4);
			checkTypeSize("uint32_t", "uint", sizeof(uint), 4);
			checkTypeSize("int64_t", "long", sizeof(long), 8);
			checkTypeSize("uint64_t", "ulong", sizeof(ulong), 8);
			checkTypeSize("float", "float", sizeof(float), 4);
			checkTypeSize("double", "double", sizeof(double), 8);
			checkTypeSize("size_t", "ulong", sizeof(ulong), 8);
			checkTypeSize("__m128", "System.Numerics.Vector4", sizeof(System.Numerics.Vector4), 16);
			checkTypeSize("__m128i", "Int4", sizeof(Int4), 16);
			checkTypeSize("__m128d", "Double2", sizeof(Double2), 16);
			checkTypeSize("float4", "System.Numerics.Vector4", sizeof(System.Numerics.Vector4), 16);
			checkTypeSize("float3", "System.Numerics.Vector3", sizeof(System.Numerics.Vector3), 12);
			checkTypeSize("float2", "System.Numerics.Vector2", sizeof(System.Numerics.Vector2), 8);
			checkTypeSize("float4x4", "System.Numerics.Matrix4x4", sizeof(System.Numerics.Matrix4x4), 64);
			checkTypeSize("CustomSharedStruct", "CustomSharedStruct", sizeof(CustomSharedStruct), 20);
			checkTypeSize("TestStruct1", "TestStruct1", sizeof(TestStruct1), 584);
			checkTypeSize("TestStruct2", "TestStruct2", sizeof(TestStruct2), 592);
			checkTypeSize("AlignedStruct1", "AlignedStruct1", sizeof(AlignedStruct1), 32);
			checkTypeSize("GpuStruct", "GpuStruct", sizeof(GpuStruct), 96);
			checkTypeSize("GpuConstantBuffer", "GpuConstantBuffer", sizeof(GpuConstantBuffer), 192);
			checkTypeSize("CppOuterNamespace::CppInnerNamespace::StructInsideNamespace", "CppOuterNamespace.CppInnerNamespace.StructInsideNamespace", sizeof(CppOuterNamespace.CppInnerNamespace.StructInsideNamespace), 4);
			checkTypeSize("TestStruct3", "TestStruct3", sizeof(TestStruct3), 608);
			checkTypeSize("SpecialCasesStruct", "SpecialCasesStruct", sizeof(SpecialCasesStruct), 32);
			checkTypeSize("IncludedVehicleStruct", "IncludedVehicleStruct", sizeof(IncludedVehicleStruct), 4);
			checkTypeSize("IncludedBicycleStruct", "IncludedBicycleStruct", sizeof(IncludedBicycleStruct), 4);
			
			if (sizeof(void *) != 8) throw new Exception($"Different configured pointer size (8 bytes) than actual size ({sizeof(void *)} bytes)");
		}
		
		public static void _rc_ci() {
			if (!isInitialized) throw new Exception("RabbitCall not initialized, please call RabbitCallApi.init() at startup (for all partitions if you have multiple ones).");
		}
		
		public static string readStringUtf8AndFree(_rc_PtrAndSize ptr) {
			if (ptr.ptr == null) return null;
			string s = utf8Encoding.GetString((byte *)ptr.ptr, checked((int)(ptr.size - sizeof(byte))));
			rabbitcall_deallocateMemory(ptr.ptr); // Free the buffer that was allocated in c++
			return s;
		}
		
		public static string readStringUtf16AndFree(_rc_PtrAndSize ptr) {
			if (ptr.ptr == null) return null;
			string s = utf16Encoding.GetString((byte *)ptr.ptr, checked((int)(ptr.size - sizeof(char))));
			rabbitcall_deallocateMemory(ptr.ptr); // Free the buffer that was allocated in c++
			return s;
		}
		
		public static void releaseCallback(IntPtr callback) {
			GCHandle.FromIntPtr(callback).Free();
		}
		
		public static void _rc_ce(_rc_PtrAndSize _rc_e) {
			if (_rc_e.ptr != null) throw new Exception(readStringUtf8AndFree(_rc_e));
		}
	}
}
