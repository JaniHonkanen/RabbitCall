// This file was auto-generated by RabbitCall - do not modify manually.


#include "pch.h"


#include "rabbitcall_generated_main.h"

RabbitCallType::RabbitCallType(const std::string &name, size_t size): name(name), size(size) {}
size_t RabbitCallType::getSize() { return size; }
const std::string & RabbitCallType::getName() { return name; }

namespace RabbitCallInternalNamespace {
	
	void * _rc_alloc(int64_t size) {
		void *p = malloc(size);
		if (!p) throw std::bad_alloc();
		return p;
	}
	
	void _rc_dealloc(void *ptr) noexcept {
		free(ptr);
	}
	
	void * _rc_allocTaskMem(int64_t size) {
		#if defined (_MSC_VER)
		void *p = CoTaskMemAlloc(size);
		#else
		void *p = malloc(size);
		#endif
		if (!p) throw std::bad_alloc();
		return p;
	}
	
	void _rc_deallocTaskMem(void *ptr) noexcept {
		#if defined (_MSC_VER)
		CoTaskMemFree(ptr);
		#else
		free(ptr);
		#endif
	}
	
	void RabbitCallEnum::setMapping(int64_t id, const std::string &name) {
		namesById[id] = name;
		idsByName[name] = id;
	}
	
	int64_t RabbitCallEnum::parse(const std::string &name) {
		auto i = idsByName.find(name);
		return i == idsByName.end() ? 0 : i->second;
	}
	
	std::string RabbitCallEnum::toString(int64_t id) {
		auto i = namesById.find(id);
		return i == namesById.end() ? "" : i->second;
	}
	RabbitCallInternal rabbitCallInternal;
	
	RabbitCallType * RabbitCallInternal::getTypeByName(const std::string &name) {
		auto i = typesByName.find(name);
		return i == typesByName.end() ? NULL : i->second;
	}
	
}

using namespace RabbitCallInternalNamespace;

extern "C" RC_EXPORT void rabbitcall_init(void(*releaseCallbackCallback)(void *), _rc_PtrAndSize *_rc_e) noexcept {
	try {
		if (rabbitCallInternal.initialized) throw std::logic_error("RabbitCall already initialized");
		rabbitCallInternal.initialized = true;
		rabbitCallInternal.releaseCallbackCallback = releaseCallbackCallback;
		if (sizeof(std::string().c_str()[0]) != 1) throw std::logic_error((std::string("The character type ('char') configured for std::string has incorrect size: 1, expected: ") + std::to_string(sizeof(std::string().c_str()[0])) + " (wrong character type in configuration file?)").c_str());
		if (sizeof(std::u16string().c_str()[0]) != 2) throw std::logic_error((std::string("The character type ('char16_t') configured for std::u16string has incorrect size: 2, expected: ") + std::to_string(sizeof(std::u16string().c_str()[0])) + " (wrong character type in configuration file?)").c_str());
		RabbitCallInternalNamespace::initPartition_main();
		RabbitCallInternalNamespace::initPartition_partition1();
		RabbitCallInternalNamespace::initPartition_partition2();
	}
	catch (std::exception &_rc_ex) {
		*_rc_e = _rc_createString(std::string(_rc_ex.what()));
	}
}

extern "C" RC_EXPORT void * rabbitcall_allocateMemory(int64_t size) {
	return _rc_alloc(size);
}

extern "C" RC_EXPORT void rabbitcall_deallocateMemory(void *ptr) noexcept {
	_rc_dealloc(ptr);
}

extern "C" RC_EXPORT int64_t rabbitcall_getTypeSizeByName(const char *name) noexcept {
	RabbitCallType *type = rabbitCallInternal.getTypeByName(name);
	return type == NULL ? -1 : (int64_t)type->getSize();
}

void RabbitCallInternalNamespace::initPartition_main() {
	rabbitCallInternal.typesByName["std::function"] = new RabbitCallType("std::function", 0);
	rabbitCallInternal.typesByName["std::string"] = new RabbitCallType("std::string", 0);
	rabbitCallInternal.typesByName["char"] = new RabbitCallType("char", sizeof(char));
	rabbitCallInternal.typesByName["std::u16string"] = new RabbitCallType("std::u16string", 0);
	rabbitCallInternal.typesByName["char16_t"] = new RabbitCallType("char16_t", sizeof(char16_t));
	rabbitCallInternal.typesByName["void"] = new RabbitCallType("void", 0);
	rabbitCallInternal.typesByName["bool"] = new RabbitCallType("bool", sizeof(bool));
	rabbitCallInternal.typesByName["signed char"] = new RabbitCallType("signed char", sizeof(signed char));
	rabbitCallInternal.typesByName["unsigned char"] = new RabbitCallType("unsigned char", sizeof(unsigned char));
	rabbitCallInternal.typesByName["short"] = new RabbitCallType("short", sizeof(short));
	rabbitCallInternal.typesByName["signed short"] = new RabbitCallType("signed short", sizeof(signed short));
	rabbitCallInternal.typesByName["unsigned short"] = new RabbitCallType("unsigned short", sizeof(unsigned short));
	rabbitCallInternal.typesByName["int"] = new RabbitCallType("int", sizeof(int));
	rabbitCallInternal.typesByName["signed int"] = new RabbitCallType("signed int", sizeof(signed int));
	rabbitCallInternal.typesByName["unsigned int"] = new RabbitCallType("unsigned int", sizeof(unsigned int));
	rabbitCallInternal.typesByName["long long"] = new RabbitCallType("long long", sizeof(long long));
	rabbitCallInternal.typesByName["signed long long"] = new RabbitCallType("signed long long", sizeof(signed long long));
	rabbitCallInternal.typesByName["unsigned long long"] = new RabbitCallType("unsigned long long", sizeof(unsigned long long));
	rabbitCallInternal.typesByName["int8_t"] = new RabbitCallType("int8_t", sizeof(int8_t));
	rabbitCallInternal.typesByName["uint8_t"] = new RabbitCallType("uint8_t", sizeof(uint8_t));
	rabbitCallInternal.typesByName["int16_t"] = new RabbitCallType("int16_t", sizeof(int16_t));
	rabbitCallInternal.typesByName["uint16_t"] = new RabbitCallType("uint16_t", sizeof(uint16_t));
	rabbitCallInternal.typesByName["int32_t"] = new RabbitCallType("int32_t", sizeof(int32_t));
	rabbitCallInternal.typesByName["uint32_t"] = new RabbitCallType("uint32_t", sizeof(uint32_t));
	rabbitCallInternal.typesByName["int64_t"] = new RabbitCallType("int64_t", sizeof(int64_t));
	rabbitCallInternal.typesByName["uint64_t"] = new RabbitCallType("uint64_t", sizeof(uint64_t));
	rabbitCallInternal.typesByName["float"] = new RabbitCallType("float", sizeof(float));
	rabbitCallInternal.typesByName["double"] = new RabbitCallType("double", sizeof(double));
	rabbitCallInternal.typesByName["size_t"] = new RabbitCallType("size_t", sizeof(size_t));
	rabbitCallInternal.typesByName["__m128"] = new RabbitCallType("__m128", sizeof(__m128));
	rabbitCallInternal.typesByName["__m128i"] = new RabbitCallType("__m128i", sizeof(__m128i));
	rabbitCallInternal.typesByName["__m128d"] = new RabbitCallType("__m128d", sizeof(__m128d));
	rabbitCallInternal.typesByName["float4"] = new RabbitCallType("float4", sizeof(float4));
	rabbitCallInternal.typesByName["float3"] = new RabbitCallType("float3", sizeof(float3));
	rabbitCallInternal.typesByName["float2"] = new RabbitCallType("float2", sizeof(float2));
	rabbitCallInternal.typesByName["float4x4"] = new RabbitCallType("float4x4", sizeof(float4x4));
	rabbitCallInternal.typesByName["CustomSharedStruct"] = new RabbitCallType("CustomSharedStruct", sizeof(CustomSharedStruct));
}

