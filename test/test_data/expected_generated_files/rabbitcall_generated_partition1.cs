// This file was auto-generated by RabbitCall - do not modify manually.

// ReSharper disable All

using System;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;

namespace CsNamespace {
	
	public static unsafe partial class _rc_Ciu {
		public static void initPartition_partition1(StringBuilder versionString) {
			versionString.Append("partition1=1.0.1");
			checkTypeSize("TestStruct1", "TestStruct1", sizeof(TestStruct1), 584);
			checkTypeSize("TestStruct2", "TestStruct2", sizeof(TestStruct2), 592);
			checkTypeSize("AlignedStruct1", "AlignedStruct1", sizeof(AlignedStruct1), 32);
			checkTypeSize("GpuStruct", "GpuStruct", sizeof(GpuStruct), 96);
			checkTypeSize("GpuConstantBuffer", "GpuConstantBuffer", sizeof(GpuConstantBuffer), 192);
			checkTypeSize("CppOuterNamespace::CppInnerNamespace::StructInsideNamespace", "CppOuterNamespace.CppInnerNamespace.StructInsideNamespace", sizeof(CppOuterNamespace.CppInnerNamespace.StructInsideNamespace), 4);
			checkTypeSize("TestStruct3", "TestStruct3", sizeof(TestStruct3), 608);
			checkTypeSize("SpecialCasesStruct", "SpecialCasesStruct", sizeof(SpecialCasesStruct), 32);
			checkTypeSize("IncludedVehicleStruct", "IncludedVehicleStruct", sizeof(IncludedVehicleStruct), 4);
			checkTypeSize("IncludedBicycleStruct", "IncludedBicycleStruct", sizeof(IncludedBicycleStruct), 4);
		}
	}
	
	public static unsafe partial class NGlobal {
		
		public static CppOuterNamespace.NTestClass2 createTestClass2Instance(string name, int index)        /****/ {_rc_Ciu._rc_ci();CppOuterNamespace.NTestClass2 _rc_r;_rc_PtrAndSize _rc_e;_rc_f0(name,index,&_rc_r,&_rc_e);_rc_Ciu._rc_ce(_rc_e);return _rc_r;} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_global_createTestClass2Instance")] static extern void _rc_f0([MarshalAs(UnmanagedType.LPUTF8Str)] string a0,int a1,CppOuterNamespace.NTestClass2 *_rc_r,_rc_PtrAndSize *_rc_e);
		
		public static CppOuterNamespace.CppInnerNamespace.NTestClass3 createTestClass3Instance(string name)        /****/ {_rc_Ciu._rc_ci();CppOuterNamespace.CppInnerNamespace.NTestClass3 _rc_r;_rc_PtrAndSize _rc_e;_rc_f1(name,&_rc_r,&_rc_e);_rc_Ciu._rc_ce(_rc_e);return _rc_r;} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_global_createTestClass3Instance")] static extern void _rc_f1([MarshalAs(UnmanagedType.LPUTF8Str)] string a0,CppOuterNamespace.CppInnerNamespace.NTestClass3 *_rc_r,_rc_PtrAndSize *_rc_e);
		
		public static NBaseClass1 createBaseClass1Instance()        /****/ {_rc_Ciu._rc_ci();NBaseClass1 _rc_r;_rc_PtrAndSize _rc_e;_rc_f2(&_rc_r,&_rc_e);_rc_Ciu._rc_ce(_rc_e);return _rc_r;} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_global_createBaseClass1Instance")] static extern void _rc_f2(NBaseClass1 *_rc_r,_rc_PtrAndSize *_rc_e);
		
		public static NBaseClass2 createBaseClass2Instance()        /****/ {_rc_Ciu._rc_ci();NBaseClass2 _rc_r;_rc_PtrAndSize _rc_e;_rc_f3(&_rc_r,&_rc_e);_rc_Ciu._rc_ce(_rc_e);return _rc_r;} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_global_createBaseClass2Instance")] static extern void _rc_f3(NBaseClass2 *_rc_r,_rc_PtrAndSize *_rc_e);
		
		public static NBaseClass3 createBaseClass3Instance()        /****/ {_rc_Ciu._rc_ci();NBaseClass3 _rc_r;_rc_PtrAndSize _rc_e;_rc_f4(&_rc_r,&_rc_e);_rc_Ciu._rc_ce(_rc_e);return _rc_r;} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_global_createBaseClass3Instance")] static extern void _rc_f4(NBaseClass3 *_rc_r,_rc_PtrAndSize *_rc_e);
		
		public static NDerivedClass createDerivedClassInstance()        /****/ {_rc_Ciu._rc_ci();NDerivedClass _rc_r;_rc_PtrAndSize _rc_e;_rc_f5(&_rc_r,&_rc_e);_rc_Ciu._rc_ce(_rc_e);return _rc_r;} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_global_createDerivedClassInstance")] static extern void _rc_f5(NDerivedClass *_rc_r,_rc_PtrAndSize *_rc_e);
		
		public static NCallbackTest createCallbackTestInstance()        /****/ {_rc_Ciu._rc_ci();NCallbackTest _rc_r;_rc_PtrAndSize _rc_e;_rc_f6(&_rc_r,&_rc_e);_rc_Ciu._rc_ce(_rc_e);return _rc_r;} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_global_createCallbackTestInstance")] static extern void _rc_f6(NCallbackTest *_rc_r,_rc_PtrAndSize *_rc_e);
		
		public static void setStruct1Values(TestStruct1 *s)        /****/ {_rc_Ciu._rc_ci();_rc_PtrAndSize _rc_e;_rc_f7(s,&_rc_e);_rc_Ciu._rc_ce(_rc_e);} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_global_setStruct1Values")] static extern void _rc_f7(TestStruct1 *a0,_rc_PtrAndSize *_rc_e);
		
		public static void setStruct2Values(TestStruct2 *s)        /****/ {_rc_Ciu._rc_ci();_rc_PtrAndSize _rc_e;_rc_f8(s,&_rc_e);_rc_Ciu._rc_ce(_rc_e);} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_global_setStruct2Values")] static extern void _rc_f8(TestStruct2 *a0,_rc_PtrAndSize *_rc_e);
		
		public static void setCustomSharedStructValues(CustomSharedStruct *s)        /****/ {_rc_Ciu._rc_ci();_rc_PtrAndSize _rc_e;_rc_f9(s,&_rc_e);_rc_Ciu._rc_ce(_rc_e);} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_global_setCustomSharedStructValues")] static extern void _rc_f9(CustomSharedStruct *a0,_rc_PtrAndSize *_rc_e);
		
		public static void emptyFunction()        /****/ {_rc_Ciu._rc_ci();_rc_f10();} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_global_emptyFunction")] static extern void _rc_f10();
		
		public static string testEnumReflection()        /****/ {_rc_Ciu._rc_ci();_rc_PtrAndSize _rc_r;_rc_PtrAndSize _rc_e;_rc_f11(&_rc_r,&_rc_e);_rc_Ciu._rc_ce(_rc_e);return _rc_Ciu.readStringUtf8AndFree(_rc_r);} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_global_testEnumReflection")] static extern void _rc_f11(_rc_PtrAndSize *_rc_r,_rc_PtrAndSize *_rc_e);
		
		public static long getTimeRdtsc()        /****/ {_rc_Ciu._rc_ci();long _rc_r;_rc_f12(&_rc_r);return _rc_r;} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_global_getTimeRdtsc")] static extern void _rc_f12(long *_rc_r);
		
		public static NAnotherDerivedClass createAnotherDerivedClass()        /****/ {_rc_Ciu._rc_ci();NAnotherDerivedClass _rc_r;_rc_PtrAndSize _rc_e;_rc_f13(&_rc_r,&_rc_e);_rc_Ciu._rc_ce(_rc_e);return _rc_r;} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_global_createAnotherDerivedClass")] static extern void _rc_f13(NAnotherDerivedClass *_rc_r,_rc_PtrAndSize *_rc_e);
		
		// Test parameter names that would clash with internal names used in the wrapper method (other names should be generated that don't clash with the parameters).
		public static int testParameterNameClash(int _rc_r, int _rc_e, int _rc_e_)        /****/ {_rc_Ciu._rc_ci();int _rc_r_;_rc_PtrAndSize _rc_e__;_rc_f14(_rc_r,_rc_e,_rc_e_,&_rc_r_,&_rc_e__);_rc_Ciu._rc_ce(_rc_e__);return _rc_r_;} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_global_testParameterNameClash")] static extern void _rc_f14(int a0,int a1,int a2,int *_rc_r,_rc_PtrAndSize *_rc_e__);
		
		public static void handleVehicle(IncludedVehicleStruct s)        /****/ {_rc_Ciu._rc_ci();_rc_PtrAndSize _rc_e;_rc_f15(s,&_rc_e);_rc_Ciu._rc_ce(_rc_e);} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_global_handleVehicle")] static extern void _rc_f15(IncludedVehicleStruct a0,_rc_PtrAndSize *_rc_e);
		
		public static void handleBicycle(IncludedBicycleStruct s)        /****/ {_rc_Ciu._rc_ci();_rc_PtrAndSize _rc_e;_rc_f16(s,&_rc_e);_rc_Ciu._rc_ce(_rc_e);} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_global_handleBicycle")] static extern void _rc_f16(IncludedBicycleStruct a0,_rc_PtrAndSize *_rc_e);
		
		public static void testOpenGl(string projectDir)        /****/ {_rc_Ciu._rc_ci();_rc_PtrAndSize _rc_e;_rc_f17(projectDir,&_rc_e);_rc_Ciu._rc_ce(_rc_e);} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_global_testOpenGl")] static extern void _rc_f17([MarshalAs(UnmanagedType.LPUTF8Str)] string a0,_rc_PtrAndSize *_rc_e);
	}
	
	namespace CppOuterNamespace {
		public static unsafe partial class NGlobal {
			
			public static int calculateSum(int v1, CppOuterNamespace.EnumInsideNamespace v2)        /****/ {_rc_Ciu._rc_ci();int _rc_r;_rc_PtrAndSize _rc_e;_rc_f0(v1,v2,&_rc_r,&_rc_e);_rc_Ciu._rc_ce(_rc_e);return _rc_r;} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_CppOuterNamespace_global_calculateSum")] static extern void _rc_f0(int a0,CppOuterNamespace.EnumInsideNamespace a1,int *_rc_r,_rc_PtrAndSize *_rc_e);
		}
	}
	
	namespace CppOuterNamespace {
		namespace CppInnerNamespace {
			public static unsafe partial class NGlobal {
				
				public static int calculateProduct(int v1, CppOuterNamespace.CppInnerNamespace.StructInsideNamespace v2)        /****/ {_rc_Ciu._rc_ci();int _rc_r;_rc_PtrAndSize _rc_e;_rc_f0(v1,v2,&_rc_r,&_rc_e);_rc_Ciu._rc_ce(_rc_e);return _rc_r;} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_CppOuterNamespace_CppInnerNamespace_global_calculateProduct")] static extern void _rc_f0(int a0,CppOuterNamespace.CppInnerNamespace.StructInsideNamespace a1,int *_rc_r,_rc_PtrAndSize *_rc_e);
			}
		}
	}
	
	[StructLayout(LayoutKind.Explicit, Size = 584)]
	public unsafe partial struct TestStruct1 {
		[FieldOffset(0)]   public int i1;
		[FieldOffset(4)]   public byte c1;
		[FieldOffset(5)]   public byte c2;
		// Should be aligned by 4 after the preceding 1-byte variable.
		[FieldOffset(8)]   public int i2;
		// Mapped to a C# struct as defined in the config file.
		[FieldOffset(12)]  public System.Numerics.Vector4 v1;
		[FieldOffset(32)]  public System.Numerics.Vector4 *ptr1;
		[FieldOffset(40)]  public fixed int array1[25];
		[FieldOffset(140)] public fixed byte array2[400];
		[FieldOffset(540)] public int i4;
		[FieldOffset(544)] public fixed int i5[4];
		[FieldOffset(560)] public int *ptr2;
		[FieldOffset(568)] public int **ptr3;
		[FieldOffset(576)] public byte c3;
	}
	
	[StructLayout(LayoutKind.Explicit, Size = 592)]
	public unsafe partial struct TestStruct2 {
		[FieldOffset(0)]   public int i;
		// Structs can be nested normally.
		[FieldOffset(8)]   public TestStruct1 s;
	}
	
	// In C# alignment has to be ensured manually.
	[StructLayout(LayoutKind.Explicit, Size = 32)]
	public unsafe partial struct AlignedStruct1 {
		[FieldOffset(0)]   public int test;
		[FieldOffset(16)]  public System.Numerics.Vector4 v2;
	}
	
	// An enum that is automatically replicated to C#.
	public enum Enum1 {
		// Default value.
		VALUE1,
		// Explicitly defined value.
		VALUE2 = 4,
		// Value by expression.
		VALUE3 = VALUE1 + VALUE2 + 1,
	}
	
	// An enum is converted to const variables in HLSL/GLSL.
	public enum GpuEnum {
		VALUE1 = 1,
		VALUE2 = 2,
		VALUE3 = 3,
		// This comment should get copied
		// to the generated file.
		VALUE4 = 4,
	}
	
	// Struct fields must be aligned in C++ according to the HLSL/GLSL packing rules. E.g. in HLSL, each element crossing a 16-byte boundary must be aligned by 16 bytes.
	[StructLayout(LayoutKind.Explicit, Size = 96)]
	public unsafe partial struct GpuStruct {
		// These two fields fill the first 16 bytes.
		[FieldOffset(0)]   public System.Numerics.Vector2 v1;
		[FieldOffset(8)]   public System.Numerics.Vector2 v2;
		// The next two fields fill the next 16 bytes. If these were declared in reverse order, GLSL would align the
		// 3-component vector to the next 16-byte boundary while HLSL would place it directly after the integer.
		[FieldOffset(16)]  public System.Numerics.Vector3 v3;
		[FieldOffset(28)]  public int i3;
		[FieldOffset(32)]  public int i4;
		// Use the "alignas" keyword to align the vector the same way in C++ as in HLSL/GLSL. Another option is to add padding fields.
		[FieldOffset(48)]  public System.Numerics.Vector4 v4;
		[FieldOffset(64)]  public fixed byte array1[32];
	}
	
	// An optional prefix can be added to all constant buffer / uniform block fields in case they are seen as global variables in HLSL/GLSL code.
	// In GLSL, you can use the instanceName attribute to make the fields non-global.
	// The constant buffer / uniform block can be (optionally) mapped to a specific HLSL register or a GLSL binding index.
	// Variable initializer expressions are allowed, but won't be exported to C# (but you can call a C++ function that invokes a constructor to run the initializers).
	[StructLayout(LayoutKind.Explicit, Size = 192)]
	public unsafe partial struct GpuConstantBuffer {
		[FieldOffset(0)]   public System.Numerics.Matrix4x4 m;
		[FieldOffset(64)]  public System.Numerics.Vector2 v1;
		[FieldOffset(72)]  public float v2;
		// This vector will be aligned automatically.
		[FieldOffset(80)]  public System.Numerics.Vector4 v3;
		[FieldOffset(96)]  public GpuStruct s;
	}
	
	public unsafe partial struct NTestClass {
		void *_rc_t;
		public NTestClass(void *ptr) { _rc_t = ptr; }
		public bool isNull() { return _rc_t == null; }
		public void * getPtr() { return _rc_t; }
		
		// Allows destroying the object from C#.
		public void release()        /****/ {_rc_Ciu._rc_ci();_rc_PtrAndSize _rc_e;_rc_f0(_rc_t,&_rc_e);_rc_Ciu._rc_ce(_rc_e);} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_TestClass_release")] static extern void _rc_f0(void *_rc_t,_rc_PtrAndSize *_rc_e);
		
		// Static function.
		public static NTestClass create(string name)        /****/ {_rc_Ciu._rc_ci();NTestClass _rc_r;_rc_PtrAndSize _rc_e;_rc_f1(name,&_rc_r,&_rc_e);_rc_Ciu._rc_ce(_rc_e);return _rc_r;} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_TestClass_create")] static extern void _rc_f1([MarshalAs(UnmanagedType.LPUTF8Str)] string a0,NTestClass *_rc_r,_rc_PtrAndSize *_rc_e);
		
		public string getName()        /****/ {_rc_Ciu._rc_ci();_rc_PtrAndSize _rc_r;_rc_PtrAndSize _rc_e;_rc_f2(_rc_t,&_rc_r,&_rc_e);_rc_Ciu._rc_ce(_rc_e);return _rc_Ciu.readStringUtf8AndFree(_rc_r);} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_TestClass_getName")] static extern void _rc_f2(void *_rc_t,_rc_PtrAndSize *_rc_r,_rc_PtrAndSize *_rc_e);
		
		public void setName(string name)        /****/ {_rc_Ciu._rc_ci();_rc_PtrAndSize _rc_e;_rc_f3(_rc_t,name,&_rc_e);_rc_Ciu._rc_ce(_rc_e);} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_TestClass_setName")] static extern void _rc_f3(void *_rc_t,[MarshalAs(UnmanagedType.LPUTF8Str)] string a0,_rc_PtrAndSize *_rc_e);
		
		public string concatenateStrings(string s1, string s2)        /****/ {_rc_Ciu._rc_ci();_rc_PtrAndSize _rc_r;_rc_PtrAndSize _rc_e;_rc_f4(_rc_t,s1,s2,&_rc_r,&_rc_e);_rc_Ciu._rc_ce(_rc_e);return _rc_Ciu.readStringUtf8AndFree(_rc_r);} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_TestClass_concatenateStrings")] static extern void _rc_f4(void *_rc_t,[MarshalAs(UnmanagedType.LPUTF8Str)] string a0,[MarshalAs(UnmanagedType.LPUTF8Str)] string a1,_rc_PtrAndSize *_rc_r,_rc_PtrAndSize *_rc_e);
		
		public string concatenateStringsUtf16(string s1, string s2)        /****/ {_rc_Ciu._rc_ci();_rc_PtrAndSize _rc_r;_rc_PtrAndSize _rc_e;_rc_f5(_rc_t,s1,s2,&_rc_r,&_rc_e);_rc_Ciu._rc_ce(_rc_e);return _rc_Ciu.readStringUtf16AndFree(_rc_r);} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_TestClass_concatenateStringsUtf16")] static extern void _rc_f5(void *_rc_t,[MarshalAs(UnmanagedType.LPWStr)] string a0,[MarshalAs(UnmanagedType.LPWStr)] string a1,_rc_PtrAndSize *_rc_r,_rc_PtrAndSize *_rc_e);
		
		// Exceptions are propagated to C#.
		public void throwException()        /****/ {_rc_Ciu._rc_ci();_rc_PtrAndSize _rc_e;_rc_f6(_rc_t,&_rc_e);_rc_Ciu._rc_ce(_rc_e);} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_TestClass_throwException")] static extern void _rc_f6(void *_rc_t,_rc_PtrAndSize *_rc_e);
		
		// A function using custom C++ vector types mapped to built-in C# types.
		public System.Numerics.Vector4 addFloatVectors(System.Numerics.Vector4 v1, System.Numerics.Vector4 v2)        /****/ {_rc_Ciu._rc_ci();System.Numerics.Vector4 _rc_r;_rc_PtrAndSize _rc_e;_rc_f7(_rc_t,v1,v2,&_rc_r,&_rc_e);_rc_Ciu._rc_ce(_rc_e);return _rc_r;} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_TestClass_addFloatVectors")] static extern void _rc_f7(void *_rc_t,System.Numerics.Vector4 a0,System.Numerics.Vector4 a1,System.Numerics.Vector4 *_rc_r,_rc_PtrAndSize *_rc_e);
		
		// A function using custom C++ vector types mapped to built-in C# types, with exceptions disabled.
		public System.Numerics.Vector4 addFloatVectorsNoexcept(System.Numerics.Vector4 v1, System.Numerics.Vector4 v2)        /****/ {_rc_Ciu._rc_ci();System.Numerics.Vector4 _rc_r;_rc_f8(_rc_t,v1,v2,&_rc_r);return _rc_r;} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_TestClass_addFloatVectorsNoexcept")] static extern void _rc_f8(void *_rc_t,System.Numerics.Vector4 a0,System.Numerics.Vector4 a1,System.Numerics.Vector4 *_rc_r);
		
		// A wrapper for the previous SSE function that does not require aligned parameters and takes a float2 parameter instead of float4 for the 2d coordinates.
		public System.Numerics.Vector4 getColor(System.Numerics.Vector2 coords)        /****/ {_rc_Ciu._rc_ci();System.Numerics.Vector4 _rc_r;_rc_PtrAndSize _rc_e;_rc_f9(_rc_t,coords,&_rc_r,&_rc_e);_rc_Ciu._rc_ce(_rc_e);return _rc_r;} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_TestClass_getColor")] static extern void _rc_f9(void *_rc_t,System.Numerics.Vector2 a0,System.Numerics.Vector4 *_rc_r,_rc_PtrAndSize *_rc_e);
		
		/**
		 * Comments are copied to C#.
		 */
		public void commentedFunction1()        /****/ {_rc_Ciu._rc_ci();_rc_PtrAndSize _rc_e;_rc_f10(_rc_t,&_rc_e);_rc_Ciu._rc_ce(_rc_e);} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_TestClass_commentedFunction1")] static extern void _rc_f10(void *_rc_t,_rc_PtrAndSize *_rc_e);
		
		// Multiple consecutive single-line
		// comments like this are copied to C#.
		public void commentedFunction2()        /****/ {_rc_Ciu._rc_ci();_rc_PtrAndSize _rc_e;_rc_f11(_rc_t,&_rc_e);_rc_Ciu._rc_ce(_rc_e);} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_TestClass_commentedFunction2")] static extern void _rc_f11(void *_rc_t,_rc_PtrAndSize *_rc_e);
	}
	
	public unsafe partial struct NBaseClass1 {
		void *_rc_t;
		public NBaseClass1(void *ptr) { _rc_t = ptr; }
		public bool isNull() { return _rc_t == null; }
		public void * getPtr() { return _rc_t; }
		
		public void release()        /****/ {_rc_Ciu._rc_ci();_rc_PtrAndSize _rc_e;_rc_f0(_rc_t,&_rc_e);_rc_Ciu._rc_ce(_rc_e);} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_BaseClass1_release")] static extern void _rc_f0(void *_rc_t,_rc_PtrAndSize *_rc_e);
		
		public string test1()        /****/ {_rc_Ciu._rc_ci();_rc_PtrAndSize _rc_r;_rc_PtrAndSize _rc_e;_rc_f1(_rc_t,&_rc_r,&_rc_e);_rc_Ciu._rc_ce(_rc_e);return _rc_Ciu.readStringUtf8AndFree(_rc_r);} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_BaseClass1_test1")] static extern void _rc_f1(void *_rc_t,_rc_PtrAndSize *_rc_r,_rc_PtrAndSize *_rc_e);
	}
	
	public unsafe partial struct NBaseClass2 {
		void *_rc_t;
		public NBaseClass2(void *ptr) { _rc_t = ptr; }
		public bool isNull() { return _rc_t == null; }
		public void * getPtr() { return _rc_t; }
		
		public void release()        /****/ {_rc_Ciu._rc_ci();_rc_PtrAndSize _rc_e;_rc_f0(_rc_t,&_rc_e);_rc_Ciu._rc_ce(_rc_e);} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_BaseClass2_release")] static extern void _rc_f0(void *_rc_t,_rc_PtrAndSize *_rc_e);
		
		public string test2()        /****/ {_rc_Ciu._rc_ci();_rc_PtrAndSize _rc_r;_rc_PtrAndSize _rc_e;_rc_f1(_rc_t,&_rc_r,&_rc_e);_rc_Ciu._rc_ce(_rc_e);return _rc_Ciu.readStringUtf8AndFree(_rc_r);} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_BaseClass2_test2")] static extern void _rc_f1(void *_rc_t,_rc_PtrAndSize *_rc_r,_rc_PtrAndSize *_rc_e);
	}
	
	public unsafe partial struct NBaseClass3 {
		void *_rc_t;
		public NBaseClass3(void *ptr) { _rc_t = ptr; }
		public bool isNull() { return _rc_t == null; }
		public void * getPtr() { return _rc_t; }
		
		public void release()        /****/ {_rc_Ciu._rc_ci();_rc_PtrAndSize _rc_e;_rc_f0(_rc_t,&_rc_e);_rc_Ciu._rc_ce(_rc_e);} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_BaseClass3_release")] static extern void _rc_f0(void *_rc_t,_rc_PtrAndSize *_rc_e);
		
		public string test3()        /****/ {_rc_Ciu._rc_ci();_rc_PtrAndSize _rc_r;_rc_PtrAndSize _rc_e;_rc_f1(_rc_t,&_rc_r,&_rc_e);_rc_Ciu._rc_ce(_rc_e);return _rc_Ciu.readStringUtf8AndFree(_rc_r);} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_BaseClass3_test3")] static extern void _rc_f1(void *_rc_t,_rc_PtrAndSize *_rc_r,_rc_PtrAndSize *_rc_e);
	}
	
	// Functions from public base classes will be accessible from C#, but those from private base classes won't.
	public unsafe partial struct NDerivedClass {
		void *_rc_t;
		public NDerivedClass(void *ptr) { _rc_t = ptr; }
		public bool isNull() { return _rc_t == null; }
		public void * getPtr() { return _rc_t; }
		
		public static implicit operator NBaseClass1(NDerivedClass v) => new NBaseClass1(v.getPtr());
		public static implicit operator NBaseClass2(NDerivedClass v) => new NBaseClass2(v.getPtr());
		public static implicit operator NBaseClass3(NDerivedClass v) => new NBaseClass3(v.getPtr());
		
		public void release()        /****/ {_rc_Ciu._rc_ci();_rc_PtrAndSize _rc_e;_rc_f0(_rc_t,&_rc_e);_rc_Ciu._rc_ce(_rc_e);} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_DerivedClass_release")] static extern void _rc_f0(void *_rc_t,_rc_PtrAndSize *_rc_e);
		
		public string test1()        /****/ {_rc_Ciu._rc_ci();_rc_PtrAndSize _rc_r;_rc_PtrAndSize _rc_e;_rc_f1(_rc_t,&_rc_r,&_rc_e);_rc_Ciu._rc_ce(_rc_e);return _rc_Ciu.readStringUtf8AndFree(_rc_r);} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_DerivedClass_test1")] static extern void _rc_f1(void *_rc_t,_rc_PtrAndSize *_rc_r,_rc_PtrAndSize *_rc_e);
		
		public string test3()        /****/ {_rc_Ciu._rc_ci();_rc_PtrAndSize _rc_r;_rc_PtrAndSize _rc_e;_rc_f2(_rc_t,&_rc_r,&_rc_e);_rc_Ciu._rc_ce(_rc_e);return _rc_Ciu.readStringUtf8AndFree(_rc_r);} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_DerivedClass_test3")] static extern void _rc_f2(void *_rc_t,_rc_PtrAndSize *_rc_r,_rc_PtrAndSize *_rc_e);
	}
	
	public unsafe partial struct NCallbackTest {
		void *_rc_t;
		public NCallbackTest(void *ptr) { _rc_t = ptr; }
		public bool isNull() { return _rc_t == null; }
		public void * getPtr() { return _rc_t; }
		
		public void release()        /****/ {_rc_Ciu._rc_ci();_rc_PtrAndSize _rc_e;_rc_f0(_rc_t,&_rc_e);_rc_Ciu._rc_ce(_rc_e);} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_CallbackTest_release")] static extern void _rc_f0(void *_rc_t,_rc_PtrAndSize *_rc_e);
		
		public string invokeGivenCallback(string s1, string s2, Callback_invokeGivenCallback_callback callback)        /****/ {_rc_Ciu._rc_ci();_rc_PtrAndSize _rc_r;_rc_PtrAndSize _rc_e;_rc_f1(_rc_t,s1,s2,_rc_tdp0,(void *)GCHandle.ToIntPtr(GCHandle.Alloc(callback)),&_rc_r,&_rc_e);_rc_Ciu._rc_ce(_rc_e);return _rc_Ciu.readStringUtf8AndFree(_rc_r);} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_CallbackTest_invokeGivenCallback")] static extern void _rc_f1(void *_rc_t,[MarshalAs(UnmanagedType.LPUTF8Str)] string a0,[MarshalAs(UnmanagedType.LPUTF8Str)] string a1,IntPtr a2,void *cb0,_rc_PtrAndSize *_rc_r,_rc_PtrAndSize *_rc_e);
		public delegate string Callback_invokeGivenCallback_callback(string p1, string p2);
		
		public string invokeGivenCallbackUtf16(string s1, string s2, Callback_invokeGivenCallbackUtf16_callback callback)        /****/ {_rc_Ciu._rc_ci();_rc_PtrAndSize _rc_r;_rc_PtrAndSize _rc_e;_rc_f2(_rc_t,s1,s2,_rc_tdp1,(void *)GCHandle.ToIntPtr(GCHandle.Alloc(callback)),&_rc_r,&_rc_e);_rc_Ciu._rc_ce(_rc_e);return _rc_Ciu.readStringUtf16AndFree(_rc_r);} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_CallbackTest_invokeGivenCallbackUtf16")] static extern void _rc_f2(void *_rc_t,[MarshalAs(UnmanagedType.LPWStr)] string a0,[MarshalAs(UnmanagedType.LPWStr)] string a1,IntPtr a2,void *cb0,_rc_PtrAndSize *_rc_r,_rc_PtrAndSize *_rc_e);
		public delegate string Callback_invokeGivenCallbackUtf16_callback(string p1, string p2);
		
		public void setCallback(Callback_setCallback_callback callback)        /****/ {_rc_Ciu._rc_ci();_rc_PtrAndSize _rc_e;_rc_f3(_rc_t,_rc_tdp2,(void *)GCHandle.ToIntPtr(GCHandle.Alloc(callback)),&_rc_e);_rc_Ciu._rc_ce(_rc_e);} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_CallbackTest_setCallback")] static extern void _rc_f3(void *_rc_t,IntPtr a0,void *cb0,_rc_PtrAndSize *_rc_e);
		public delegate string Callback_setCallback_callback(string s1, string s2);
		
		public string invokeStoredCallback(string s1, string s2)        /****/ {_rc_Ciu._rc_ci();_rc_PtrAndSize _rc_r;_rc_PtrAndSize _rc_e;_rc_f4(_rc_t,s1,s2,&_rc_r,&_rc_e);_rc_Ciu._rc_ce(_rc_e);return _rc_Ciu.readStringUtf8AndFree(_rc_r);} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_CallbackTest_invokeStoredCallback")] static extern void _rc_f4(void *_rc_t,[MarshalAs(UnmanagedType.LPUTF8Str)] string a0,[MarshalAs(UnmanagedType.LPUTF8Str)] string a1,_rc_PtrAndSize *_rc_r,_rc_PtrAndSize *_rc_e);
		
		public long invokeIntCallbackRepeatedly(long rounds, Callback_invokeIntCallbackRepeatedly_callback callback)        /****/ {_rc_Ciu._rc_ci();long _rc_r;_rc_PtrAndSize _rc_e;_rc_f5(_rc_t,rounds,_rc_tdp3,(void *)GCHandle.ToIntPtr(GCHandle.Alloc(callback)),&_rc_r,&_rc_e);_rc_Ciu._rc_ce(_rc_e);return _rc_r;} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_CallbackTest_invokeIntCallbackRepeatedly")] static extern void _rc_f5(void *_rc_t,long a0,IntPtr a1,void *cb0,long *_rc_r,_rc_PtrAndSize *_rc_e);
		public delegate int Callback_invokeIntCallbackRepeatedly_callback(int i1, int i2);
		
		public long invokeStringParamCallbackRepeatedly(long rounds, Callback_invokeStringParamCallbackRepeatedly_callback callback)        /****/ {_rc_Ciu._rc_ci();long _rc_r;_rc_PtrAndSize _rc_e;_rc_f6(_rc_t,rounds,_rc_tdp4,(void *)GCHandle.ToIntPtr(GCHandle.Alloc(callback)),&_rc_r,&_rc_e);_rc_Ciu._rc_ce(_rc_e);return _rc_r;} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_CallbackTest_invokeStringParamCallbackRepeatedly")] static extern void _rc_f6(void *_rc_t,long a0,IntPtr a1,void *cb0,long *_rc_r,_rc_PtrAndSize *_rc_e);
		public delegate int Callback_invokeStringParamCallbackRepeatedly_callback(string s);
		
		public long invokeStringReturnValueCallbackRepeatedly(long rounds, Callback_invokeStringReturnValueCallbackRepeatedly_callback callback)        /****/ {_rc_Ciu._rc_ci();long _rc_r;_rc_PtrAndSize _rc_e;_rc_f7(_rc_t,rounds,_rc_tdp5,(void *)GCHandle.ToIntPtr(GCHandle.Alloc(callback)),&_rc_r,&_rc_e);_rc_Ciu._rc_ce(_rc_e);return _rc_r;} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_CallbackTest_invokeStringReturnValueCallbackRepeatedly")] static extern void _rc_f7(void *_rc_t,long a0,IntPtr a1,void *cb0,long *_rc_r,_rc_PtrAndSize *_rc_e);
		public delegate string Callback_invokeStringReturnValueCallbackRepeatedly_callback();
		
		static _rc_td0 _rc_tdi0;
		static IntPtr _rc_tdp0;
		[return: MarshalAs(UnmanagedType.LPUTF8Str)]
		delegate string _rc_td0([MarshalAs(UnmanagedType.LPUTF8Str)] string p1, [MarshalAs(UnmanagedType.LPUTF8Str)] string p2, IntPtr _rc_cbdip);
		#if ENABLE_IL2CPP
		[AOT.MonoPInvokeCallback(typeof(_rc_td0))]
		#endif
		static string _rc_tm0([MarshalAs(UnmanagedType.LPUTF8Str)] string p1, [MarshalAs(UnmanagedType.LPUTF8Str)] string p2, IntPtr _rc_cbdip) {return ((Callback_invokeGivenCallback_callback)GCHandle.FromIntPtr(_rc_cbdip).Target)(p1,p2);}
		static _rc_td1 _rc_tdi1;
		static IntPtr _rc_tdp1;
		[return: MarshalAs(UnmanagedType.LPWStr)]
		delegate string _rc_td1([MarshalAs(UnmanagedType.LPWStr)] string p1, [MarshalAs(UnmanagedType.LPWStr)] string p2, IntPtr _rc_cbdip);
		#if ENABLE_IL2CPP
		[AOT.MonoPInvokeCallback(typeof(_rc_td1))]
		#endif
		static string _rc_tm1([MarshalAs(UnmanagedType.LPWStr)] string p1, [MarshalAs(UnmanagedType.LPWStr)] string p2, IntPtr _rc_cbdip) {return ((Callback_invokeGivenCallbackUtf16_callback)GCHandle.FromIntPtr(_rc_cbdip).Target)(p1,p2);}
		static _rc_td2 _rc_tdi2;
		static IntPtr _rc_tdp2;
		[return: MarshalAs(UnmanagedType.LPUTF8Str)]
		delegate string _rc_td2([MarshalAs(UnmanagedType.LPUTF8Str)] string s1, [MarshalAs(UnmanagedType.LPUTF8Str)] string s2, IntPtr _rc_cbdip);
		#if ENABLE_IL2CPP
		[AOT.MonoPInvokeCallback(typeof(_rc_td2))]
		#endif
		static string _rc_tm2([MarshalAs(UnmanagedType.LPUTF8Str)] string s1, [MarshalAs(UnmanagedType.LPUTF8Str)] string s2, IntPtr _rc_cbdip) {return ((Callback_setCallback_callback)GCHandle.FromIntPtr(_rc_cbdip).Target)(s1,s2);}
		static _rc_td3 _rc_tdi3;
		static IntPtr _rc_tdp3;
		delegate int _rc_td3(int i1, int i2, IntPtr _rc_cbdip);
		#if ENABLE_IL2CPP
		[AOT.MonoPInvokeCallback(typeof(_rc_td3))]
		#endif
		static int _rc_tm3(int i1, int i2, IntPtr _rc_cbdip) {return ((Callback_invokeIntCallbackRepeatedly_callback)GCHandle.FromIntPtr(_rc_cbdip).Target)(i1,i2);}
		static _rc_td4 _rc_tdi4;
		static IntPtr _rc_tdp4;
		delegate int _rc_td4([MarshalAs(UnmanagedType.LPUTF8Str)] string s, IntPtr _rc_cbdip);
		#if ENABLE_IL2CPP
		[AOT.MonoPInvokeCallback(typeof(_rc_td4))]
		#endif
		static int _rc_tm4([MarshalAs(UnmanagedType.LPUTF8Str)] string s, IntPtr _rc_cbdip) {return ((Callback_invokeStringParamCallbackRepeatedly_callback)GCHandle.FromIntPtr(_rc_cbdip).Target)(s);}
		static _rc_td5 _rc_tdi5;
		static IntPtr _rc_tdp5;
		[return: MarshalAs(UnmanagedType.LPUTF8Str)]
		delegate string _rc_td5(IntPtr _rc_cbdip);
		#if ENABLE_IL2CPP
		[AOT.MonoPInvokeCallback(typeof(_rc_td5))]
		#endif
		static string _rc_tm5(IntPtr _rc_cbdip) {return ((Callback_invokeStringReturnValueCallbackRepeatedly_callback)GCHandle.FromIntPtr(_rc_cbdip).Target)();}
		
		static NCallbackTest() {
			_rc_tdi0 = _rc_tm0;
			_rc_tdp0 = Marshal.GetFunctionPointerForDelegate(_rc_tdi0);
			_rc_tdi1 = _rc_tm1;
			_rc_tdp1 = Marshal.GetFunctionPointerForDelegate(_rc_tdi1);
			_rc_tdi2 = _rc_tm2;
			_rc_tdp2 = Marshal.GetFunctionPointerForDelegate(_rc_tdi2);
			_rc_tdi3 = _rc_tm3;
			_rc_tdp3 = Marshal.GetFunctionPointerForDelegate(_rc_tdi3);
			_rc_tdi4 = _rc_tm4;
			_rc_tdp4 = Marshal.GetFunctionPointerForDelegate(_rc_tdi4);
			_rc_tdi5 = _rc_tm5;
			_rc_tdp5 = Marshal.GetFunctionPointerForDelegate(_rc_tdi5);
		}
	}
	
	namespace CppOuterNamespace {
		public unsafe partial struct NTestClass2 {
			void *_rc_t;
			public NTestClass2(void *ptr) { _rc_t = ptr; }
			public bool isNull() { return _rc_t == null; }
			public void * getPtr() { return _rc_t; }
			
			public void release()        /****/ {_rc_Ciu._rc_ci();_rc_PtrAndSize _rc_e;_rc_f0(_rc_t,&_rc_e);_rc_Ciu._rc_ce(_rc_e);} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_CppOuterNamespace_TestClass2_release")] static extern void _rc_f0(void *_rc_t,_rc_PtrAndSize *_rc_e);
			
			public string getName()        /****/ {_rc_Ciu._rc_ci();_rc_PtrAndSize _rc_r;_rc_PtrAndSize _rc_e;_rc_f1(_rc_t,&_rc_r,&_rc_e);_rc_Ciu._rc_ce(_rc_e);return _rc_Ciu.readStringUtf8AndFree(_rc_r);} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_CppOuterNamespace_TestClass2_getName")] static extern void _rc_f1(void *_rc_t,_rc_PtrAndSize *_rc_r,_rc_PtrAndSize *_rc_e);
			
			public int getIndex()        /****/ {_rc_Ciu._rc_ci();int _rc_r;_rc_PtrAndSize _rc_e;_rc_f2(_rc_t,&_rc_r,&_rc_e);_rc_Ciu._rc_ce(_rc_e);return _rc_r;} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_CppOuterNamespace_TestClass2_getIndex")] static extern void _rc_f2(void *_rc_t,int *_rc_r,_rc_PtrAndSize *_rc_e);
		}
	}
	
	namespace CppOuterNamespace {
		public enum EnumInsideNamespace {
			TEST1 = 1,
			TEST2 = 2,
		}
	}
	
	namespace CppOuterNamespace {
		namespace CppInnerNamespace {
			[StructLayout(LayoutKind.Explicit, Size = 4)]
			public unsafe partial struct StructInsideNamespace {
				[FieldOffset(0)]   public int v;
			}
		}
	}
	
	namespace CppOuterNamespace {
		namespace CppInnerNamespace {
			public unsafe partial struct NTestClass3 {
				void *_rc_t;
				public NTestClass3(void *ptr) { _rc_t = ptr; }
				public bool isNull() { return _rc_t == null; }
				public void * getPtr() { return _rc_t; }
				
				public void release()        /****/ {_rc_Ciu._rc_ci();_rc_PtrAndSize _rc_e;_rc_f0(_rc_t,&_rc_e);_rc_Ciu._rc_ce(_rc_e);} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_CppOuterNamespace_CppInnerNamespace_TestClass3_release")] static extern void _rc_f0(void *_rc_t,_rc_PtrAndSize *_rc_e);
				
				public string getName()        /****/ {_rc_Ciu._rc_ci();_rc_PtrAndSize _rc_r;_rc_PtrAndSize _rc_e;_rc_f1(_rc_t,&_rc_r,&_rc_e);_rc_Ciu._rc_ce(_rc_e);return _rc_Ciu.readStringUtf8AndFree(_rc_r);} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_CppOuterNamespace_CppInnerNamespace_TestClass3_getName")] static extern void _rc_f1(void *_rc_t,_rc_PtrAndSize *_rc_r,_rc_PtrAndSize *_rc_e);
			}
		}
	}
	
	// A struct that uses a struct from another file.
	[StructLayout(LayoutKind.Explicit, Size = 608)]
	public unsafe partial struct TestStruct3 {
		[FieldOffset(0)]   public int i;
		[FieldOffset(4)]   public byte c;
		// Should be aligned.
		[FieldOffset(8)]   public TestStruct1 s;
		[FieldOffset(592)] public TestStruct1 *ptr;
		[FieldOffset(600)] public long i2;
	}
	
	// A class that is derived from a class in another file.
	public unsafe partial struct NAnotherDerivedClass {
		void *_rc_t;
		public NAnotherDerivedClass(void *ptr) { _rc_t = ptr; }
		public bool isNull() { return _rc_t == null; }
		public void * getPtr() { return _rc_t; }
		
		public static implicit operator NBaseClass1(NAnotherDerivedClass v) => new NBaseClass1(v.getPtr());
		public static implicit operator NBaseClass2(NAnotherDerivedClass v) => new NBaseClass2(v.getPtr());
		public static implicit operator NBaseClass3(NAnotherDerivedClass v) => new NBaseClass3(v.getPtr());
		public static implicit operator NDerivedClass(NAnotherDerivedClass v) => new NDerivedClass(v.getPtr());
		
		public void release()        /****/ {_rc_Ciu._rc_ci();_rc_PtrAndSize _rc_e;_rc_f0(_rc_t,&_rc_e);_rc_Ciu._rc_ce(_rc_e);} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_AnotherDerivedClass_release")] static extern void _rc_f0(void *_rc_t,_rc_PtrAndSize *_rc_e);
		
		/**
		 * This comment should appear in the generated file.
		 */
		public string test1()        /****/ {_rc_Ciu._rc_ci();_rc_PtrAndSize _rc_r;_rc_PtrAndSize _rc_e;_rc_f1(_rc_t,&_rc_r,&_rc_e);_rc_Ciu._rc_ce(_rc_e);return _rc_Ciu.readStringUtf8AndFree(_rc_r);} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_AnotherDerivedClass_test1")] static extern void _rc_f1(void *_rc_t,_rc_PtrAndSize *_rc_r,_rc_PtrAndSize *_rc_e);
		
		public string test3()        /****/ {_rc_Ciu._rc_ci();_rc_PtrAndSize _rc_r;_rc_PtrAndSize _rc_e;_rc_f2(_rc_t,&_rc_r,&_rc_e);_rc_Ciu._rc_ce(_rc_e);return _rc_Ciu.readStringUtf8AndFree(_rc_r);} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_AnotherDerivedClass_test3")] static extern void _rc_f2(void *_rc_t,_rc_PtrAndSize *_rc_r,_rc_PtrAndSize *_rc_e);
	}
	
	public enum NonClassEnum {
		// Default value.
		VALUE1,
		// Explicitly defined value.
		VALUE2 = 4,
		// Value by expression.
		VALUE3 = VALUE1 + VALUE2 + 1,
	}
	
	[StructLayout(LayoutKind.Explicit, Size = 32)]
	public unsafe partial struct SpecialCasesStruct {
		[FieldOffset(0)]   public int i;
		[FieldOffset(4)]   public fixed int i2[4];
	}
	
	public unsafe partial struct NTestClassUsingNamespaceStd {
		void *_rc_t;
		public NTestClassUsingNamespaceStd(void *ptr) { _rc_t = ptr; }
		public bool isNull() { return _rc_t == null; }
		public void * getPtr() { return _rc_t; }
		
		// "std::" prefix not needed because of the using directive above.
		public string concatenateStrings(string s1, string s2)        /****/ {_rc_Ciu._rc_ci();_rc_PtrAndSize _rc_r;_rc_PtrAndSize _rc_e;_rc_f0(_rc_t,s1,s2,&_rc_r,&_rc_e);_rc_Ciu._rc_ce(_rc_e);return _rc_Ciu.readStringUtf8AndFree(_rc_r);} [SuppressUnmanagedCodeSecurity, DllImport(_rc_Ciu._rc_cl, EntryPoint = "rabbitcall_TestClassUsingNamespaceStd_concatenateStrings")] static extern void _rc_f0(void *_rc_t,[MarshalAs(UnmanagedType.LPUTF8Str)] string a0,[MarshalAs(UnmanagedType.LPUTF8Str)] string a1,_rc_PtrAndSize *_rc_r,_rc_PtrAndSize *_rc_e);
	}
	
	[StructLayout(LayoutKind.Explicit, Size = 4)]
	public unsafe partial struct IncludedVehicleStruct {
		[FieldOffset(0)]   public int i;
	}
	
	[StructLayout(LayoutKind.Explicit, Size = 4)]
	public unsafe partial struct IncludedBicycleStruct {
		[FieldOffset(0)]   public int i;
	}
}
